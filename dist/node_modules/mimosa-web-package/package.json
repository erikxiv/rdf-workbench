{
  "name": "mimosa-web-package",
  "version": "0.12.1",
  "homepage": "https://github.com/dbashford/mimosa-web-package",
  "author": {
    "name": "David Bashford"
  },
  "description": "Web App Packaging Module for Mimosa",
  "contributors": [
    {
      "name": "David Bashford",
      "email": "dbashford@hotmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/dbashford/mimosa-web-package"
  },
  "keywords": [
    "mimosa",
    "mmodule",
    "express",
    "package",
    "packaging"
  ],
  "dependencies": {
    "logmimosa": "0.5.0",
    "rimraf": "2.1.4",
    "lodash": "1.2.1",
    "hogan.js": "2.0.0"
  },
  "license": "MIT",
  "engines": {
    "node": ">=0.8"
  },
  "main": "./lib/index",
  "scripts": {
    "prepublish": "mimosa build"
  },
  "readme": "mimosa-web-package\n===========\n\nThis is a Mimosa module for packaging web applications. It assumes that the mimosa-server module is also being used.\n\n* For more information regarding Mimosa, see http://mimosajs.com\n* For information regarding packaging in Mimosa, see http://mimosajs.com/commands.html#package\n\n## Usage\n\nAdd `web-package` as a string to your list of `modules` in the `mimosa-config`.  When Mimosa starts up, it will install the module for you.\n\n## Functionality\n\nIf you are running `mimosa build` with the `--package` flag, mimosa-web-package will:\n\n* Remove the directory at `webPackage.outPath` if it already exists\n* Copy your entire project to the `webPackage.outPath` folder, omitting anything you have listed in `webPackage.exclude`\n* Re-write the package.json to not include any mimosa packages in the `package.json` `depedencies` array.\n* Write the parts of the fully-resolved and blown out `mimosa-config` that pertain to the server to the `webPackage.outPath` as `config.js`.  Will set some config values, like live reload to production level settings.  Will also turn normally absolute `mimosa-config` paths relative.  To accommodate app hosting solutions like Heroku, `config.js` also re-figures the location of public assets.\n* Write a simple `app.js` file to `webPackage.outPath`. `app.js` exists to be a starting point for your app when Mimosa is not available to invoke your server. It simply reads the config, and calls your `server.startServer` method passing the config.\n* runs NPM install from inside the `webpackage.outPath`\n* gzips the entire folder as a sep .gz file\n\nWhat you get as a result is an application that runs without Mimosa's aid by simply executing `node app.js`, as well as an archive file (.tar.gz) of the codebase.\n\nIf `tar` isn't available as a command line utility on your system, no tar file will be created.\n\nIf your application is using Mimosa's default server rather than a server of your own, web-package will not write an `app.js` and will not execute `npm install`.\n\n## Default Config\n\n```\nwebPackage:\n  archiveName: \"app\"\n  configName: \"config\"\n  outPath: \"dist\"\n  exclude: [\"README.md\",\"node_modules\",\"mimosa-config.coffee\",\"mimosa-config.js\",\"assets\",\".git\",\".gitignore\"]\n  appjs: \"app.js\"\n```\n\n* `archiveName`: a string, the name of the output `.tar.gz` file.  Ex: app.tar.gz. If the default is changed away from `app`, web-package will use the changed config setting.  If the default is left alone, web-package will check the for a `name` property in the package.json, and if it exists, it will be used. If the default is left as `app`, and there is no package.json.name property, the default is used.\n* `configName`: a string, the name of output configuration file. The relevant portions of the `mimosa-config` are written to the `outPath` directory as `configName + '.json'`\n* `outPath`: a string, the folder where mimosa-web-package will place your packaged app.  Can be either relative to the root of your project or absolute.\n* `exclude`: an array, files, relative to the root of the project, to not include in the package.  If it isn't listed in this array, it will be included in the package.\n* `appjs`: name of the output app.js file which bootstraps the application, when set to null, web-package will not output a bootstrap file\n",
  "readmeFilename": "README.md",
  "_id": "mimosa-web-package@0.12.1",
  "_from": "mimosa-web-package@0.12.1"
}
